You are a coding assistant for a Next.js project that uses ImageKit for image management. Follow these guidelines:

1. Environment Setup:

- Ensure NEXT_PUBLIC_IMAGEKIT_PUBLIC_KEY, NEXT_PUBLIC_IMAGEKIT_URL_ENDPOINT, and IMAGEKIT_PRIVATE_KEY are in .env
- Public keys must use NEXT*PUBLIC* prefix for client-side access
- Private key should only be used server-side

2. Image Upload Component Pattern:

- Use the reusable ImageUpload component for all image uploads
- Component must include:
  - Authentication handling
  - Loading states
  - Error handling
  - File validation
  - Preview functionality
  - Success/error callbacks

3. ImageKit Integration Rules:

- Always use IKContext with authenticator returning a Promise
- Include proper folder structure (/entity-type/...)
- Use unique filenames with timestamps
- Validate files before upload (size < 5MB, allowed types: jpeg, png, gif, webp)
- Handle upload errors gracefully

4. Database Integration:

- Store imageUrl in the relevant entity schema
- Include image metadata where appropriate
- Preserve existing data during updates
- Clean data before saving

5. Error Handling Requirements:

- Log authentication errors
- Handle upload failures
- Provide user feedback
- Include fallbacks for failed image loads

6. Component Implementation:

- Use proper state management
- Include loading indicators
- Show image previews
- Handle component cleanup
- Maintain consistent styling

7. API Endpoints:

- Secure authentication endpoint
- Handle CORS appropriately
- Validate requests
- Return appropriate status codes

8. Code Organization:

- Keep ImageKit logic in dedicated components
- Maintain consistent error handling patterns
- Use proper TypeScript types if available
- Follow project naming conventions

Remember to:

- Log important operations
- Clean up resources
- Handle component unmounting
- Validate input data
- Provide user feedback
- Maintain security best practices

Complex Data Editing Patterns
Each complex data type needs a specialized editor component
Editors should support both form-based and raw JSON editing
All editors must maintain data integrity during updates
Provide clear validation feedback
Include example data in field definitions
Field Type System
Basic types: text, textarea
Complex types: json with subtypes:
list (array management)
key-value (object with string values)
nested-object (like scenarios)
Each field should specify:
Required status
Preview behavior
Default values
Example data for help text
Modal Design Standards
Header contains action controls (not footer)
Toggle between form/JSON editing modes
Consistent padding (2rem)
Full-width form elements
Clear validation feedback
Proper overflow handling
Component Hierarchy
DataManager handles CRUD operations
EditModal manages form/JSON editing modes
Specialized editors for complex types:
ListEditor for arrays
KeyValueEditor for key-value pairs
ScenarioEditor for nested objects
Preview Formatting
Show meaningful summaries in cards
For arrays: show count of items
For objects: show count of properties
For text: show truncated content
Handle invalid data gracefully
State Management
Clear state initialization
Proper cleanup on unmount
Loading state handling
Error state management
Modal state control
Form data validation
Styling Conventions
Consistent spacing (2rem containers, 1rem gaps)
Standard border radius (4px, 8px for cards)
Hover effects for interactive elements
Clear visual hierarchy
Consistent color scheme
Proper focus states
Error Handling
Validate JSON structure
Required field validation
Type-specific validation
Clear error messages
Preserve IDs during updates
Handle API errors gracefully
